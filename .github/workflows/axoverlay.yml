name: Build axoverlay application
on:
  workflow_dispatch:
    inputs:
      trigger_next:
        description: 'Whether to run the subsequent workflows after triggering this one manully.'
        required: false
        default: false
  repository_dispatch:
    types: [axoverlay]
  push:
    paths:
      - 'axoverlay/**'
      - '!axoverlay/README.md'
      - '.github/workflows/axoverlay.yml'
concurrency:
  #group: conrcy-on-push-${{github.head_ref}}
  group: ${{ github.workflow }}-${{ github.ref }}
  #cancel-in-progress: true
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ['camera1','camera2','camera3']
      max-parallel: 1
    env:
      EXREPO: acap-native-examples
      EXNAME: axoverlay
      EAPNAME: axoverlay
      EXDIR: acap/examples/$EXNAME
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}
      - name: output HeadRef
        run: echo "github-workflow >> ${{ github.workflow }}- headref >> ${{ github.ref }}"
      - name: Get the architecture of the camera
        run: |
            ok=$(curl -s --noproxy '*' --anyauth -u ${{secrets.CAMERA_USERNAME}}:"${{secrets.CAMERA_PASSWORD}}" -k --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0", "method":"getProperties", "params": {"propertyList": ["Architecture"]}}' http://${{secrets.CAMERA_IP}}/${{matrix.arch}}/axis-cgi/basicdeviceinfo.cgi)
            echo  "response from curl= $ok" 
            ok=${ok#*Architecture}
            echo "test=$(echo $ok | cut -d '"' -f 3)" >> $GITHUB_ENV
            echo ok=$(echo $ok | cut -d '"' -f 3)

      - name: Test the env variable
        run: | 
          echo $test   

      - name: Build ${{ env.example }} application
        env:
          example: ${{ env.EXNAME }}
          imagetag: ${{ env.EXREPO }}_${{ env.EXNAME }}:1.0
          eapfile: ${{ env.EAPNAME }}_1_0_0_${{env.test}}.eap
        run: |
          cd $EXNAME
          echo $test 
          echo ARCH=$test
          docker image rm -f $imagetag
          docker build --no-cache --tag $imagetag --build-arg ARCH=$test .
          docker cp $(docker create $imagetag):/opt/app ./build
          myimg=$(docker images | awk '{print $1}' | awk 'NR==2')
          echo $myimg
          docker ps  -a --format 'CONTAINER ID : {{.ID}} | Name: {{.Names}} | Image:  {{.Image}} '        
          echo "here what the build file contains"
          ls build

      - name: upload the app to the camera
        env: 
          test: ${{env.test}}
          eapfile: ${{ env.EAPNAME }}_1_0_0_${{env.test}}.eap
        run: |
          echo ${test}
          echo $eapfile
          cd $EXNAME/build
          echo "The local directory \"axoverlay\" contains the following files:"
          ls
          upload=$(curl --noproxy  '*' --anyauth -s -S -k -F packfil=@${eapfile} -u ${{secrets.CAMERA_USERNAME}}:"${{secrets.CAMERA_PASSWORD}}" "http://${{secrets.CAMERA_IP}}/${{matrix.arch}}/axis-cgi/admin/applications/upload.cgi?reload_page=yes")
          echo $upload 
             
      - name: start the application
        run: |
          cd $EXNAME/build
          curl -s -v -u ${{secrets.CAMERA_USERNAME}}:"${{secrets.CAMERA_PASSWORD}}" "http://${{secrets.CAMERA_IP}}/${{matrix.arch}}/axis-cgi/applications/control.cgi?action=start&package=axoverlay"
          echo "contents of sys-logs so far"
          curl -s --noproxy '*' --anyauth -u ${{secrets.CAMERA_USERNAME}}:"${{secrets.CAMERA_PASSWORD}}" -k --header "Content-Type: application/json" http://${{secrets.CAMERA_IP}}/${{matrix.arch}}/axis-cgi/admin/systemlog.cgi?appname=axoverlay
          echo "time to refresh the page"
          for i in {1..8} 
          do
            sleep 1
            echo "$i"
          done
      
      
      # - name: Stop the application
      #   run: | 
      #     curl -s -v --noproxy '*' --anyauth -u ${{secrets.CAMERA_USERNAME}}:"${{secrets.CAMERA_PASSWORD}}" "http://${{secrets.CAMERA_IP}}/${{matrix.arch}}/axis-cgi/applications/control.cgi?action=stop&package=axoverlay"
      #     echo "Please refresh hemsida, so you can see the application status is stopped"  
      #     echo "time to refresh the page"
      #     for i in {1..8} 
      #     do
      #       sleep 1
      #       echo "$i"
      #     done

      # - name: remove the application
      #   run: |
      #     curl -s -v --noproxy '*' -k --anyauth -u ${{secrets.CAMERA_USERNAME}}:"${{secrets.CAMERA_PASSWORD}}" --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0", "method":"getAllProperties"}' "http://${{secrets.CAMERA_IP}}/${{matrix.arch}}/axis-cgi/applications/control.cgi?action=remove&package=axoverlay"
          
     #eltelo
     # From Daniel
